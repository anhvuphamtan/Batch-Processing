[2023-06-13T14:26:54.914+0000] {taskinstance.py:1083} INFO - Dependencies all met for <TaskInstance: ETL_psql_redshift_dag.Create_psql_schema manual__2023-06-13T14:26:53.913951+00:00 [queued]>
[2023-06-13T14:26:54.920+0000] {taskinstance.py:1083} INFO - Dependencies all met for <TaskInstance: ETL_psql_redshift_dag.Create_psql_schema manual__2023-06-13T14:26:53.913951+00:00 [queued]>
[2023-06-13T14:26:54.920+0000] {taskinstance.py:1279} INFO - 
--------------------------------------------------------------------------------
[2023-06-13T14:26:54.921+0000] {taskinstance.py:1280} INFO - Starting attempt 1 of 3
[2023-06-13T14:26:54.921+0000] {taskinstance.py:1281} INFO - 
--------------------------------------------------------------------------------
[2023-06-13T14:26:54.928+0000] {taskinstance.py:1300} INFO - Executing <Task(PostgresOperator): Create_psql_schema> on 2023-06-13 14:26:53.913951+00:00
[2023-06-13T14:26:54.932+0000] {standard_task_runner.py:55} INFO - Started process 183 to run task
[2023-06-13T14:26:54.938+0000] {standard_task_runner.py:82} INFO - Running: ['***', 'tasks', 'run', 'ETL_psql_redshift_dag', 'Create_psql_schema', 'manual__2023-06-13T14:26:53.913951+00:00', '--job-id', '2', '--raw', '--subdir', 'DAGS_FOLDER/dags_setup.py', '--cfg-path', '/tmp/tmpdjrb362r']
[2023-06-13T14:26:54.942+0000] {standard_task_runner.py:83} INFO - Job 2: Subtask Create_psql_schema
[2023-06-13T14:26:54.997+0000] {task_command.py:388} INFO - Running <TaskInstance: ETL_psql_redshift_dag.Create_psql_schema manual__2023-06-13T14:26:53.913951+00:00 [running]> on host dd24607af7ec
[2023-06-13T14:26:55.051+0000] {taskinstance.py:1509} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_OWNER=vupham
AIRFLOW_CTX_DAG_ID=ETL_psql_redshift_dag
AIRFLOW_CTX_TASK_ID=Create_psql_schema
AIRFLOW_CTX_EXECUTION_DATE=2023-06-13T14:26:53.913951+00:00
AIRFLOW_CTX_TRY_NUMBER=1
AIRFLOW_CTX_DAG_RUN_ID=manual__2023-06-13T14:26:53.913951+00:00
[2023-06-13T14:26:55.052+0000] {sql.py:254} INFO - Executing: -- Create Schema `Sale_schema` for postgreSQL database

DROP SCHEMA IF EXISTS Sale_schema CASCADE;

CREATE SCHEMA Sale_schema;

CREATE TABLE IF NOT EXISTS Sale_schema.Sales (
    Order_ID VARCHAR(255) PRIMARY KEY,
    Order_date Date,
    Product_ID BIGINT,
    Style VARCHAR(45),
    Size VARCHAR(45),
    Quantity INT,
    Payment_method VARCHAR(255),
    Total_cost DECIMAL,
    Profit DECIMAL,
    Customer_ID VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS Sale_schema.Products (
    Product_ID BIGINT PRIMARY KEY,
    Product_name VARCHAR(255),
    SKU INT,
    Brand VARCHAR(255),
    Category VARCHAR(255),
    Product_size DECIMAL,
    Sell_price DECIMAL,
    Commision_rate DECIMAL,
    Commision DECIMAL
);

CREATE TABLE IF NOT EXISTS Sale_schema.Customers (
    Customer_ID VARCHAR(255) PRIMARY KEY,
    Name VARCHAR(255),
    Phone VARCHAR(255),
    Age INT,
    Address VARCHAR(255),
    Postal_code INT
);

CREATE TABLE IF NOT EXISTS Sale_schema.Shipments (
    Shipment_ID VARCHAR(255) PRIMARY KEY,
    Order_ID VARCHAR(255),
    Shipping_date Date,
    Shipping_mode VARCHAR(255),
    Shipping_address VARCHAR(255),
    Shipping_status VARCHAR(255),
    Shipping_company VARCHAR(255),
    Shipping_cost DECIMAL,
    Shipping_zipcode INT
);

CREATE TABLE Sale_schema.Locations (
    Postal_code INT PRIMARY KEY,
    City VARCHAR(45),
    State VARCHAR(45),
    Country VARCHAR(45)
);

ALTER TABLE Sale_schema.Sales
ADD CONSTRAINT fk_sale_product_prodID FOREIGN KEY (Product_ID)
REFERENCES Sale_schema.Products (Product_ID)
ON DELETE CASCADE ON UPDATE CASCADE;


ALTER TABLE Sale_schema.Sales
ADD CONSTRAINT fk_sale_customer_custID FOREIGN KEY (Customer_ID)
REFERENCES Sale_schema.Customers (Customer_ID)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE Sale_schema.Shipments
ADD CONSTRAINT fk_shipment_sale_orderID FOREIGN KEY (Order_ID)
REFERENCES Sale_schema.Sales (Order_ID)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE Sale_schema.Shipments
ADD CONSTRAINT fk_shipment_location_zipcode FOREIGN KEY (Shipping_zipcode)
REFERENCES Sale_schema.Locations (Postal_code)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE Sale_schema.Customers
ADD CONSTRAINT fk_customer_location_postcode FOREIGN KEY (Postal_code)
REFERENCES Sale_schema.Locations (Postal_code)
ON DELETE CASCADE ON UPDATE CASCADE;
[2023-06-13T14:26:55.066+0000] {taskinstance.py:1768} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.7/site-packages/airflow/providers/common/sql/operators/sql.py", line 255, in execute
    hook = self.get_db_hook()
  File "/home/airflow/.local/lib/python3.7/site-packages/airflow/providers/common/sql/operators/sql.py", line 179, in get_db_hook
    return self._hook
  File "/home/airflow/.local/lib/python3.7/site-packages/cached_property.py", line 36, in __get__
    value = obj.__dict__[self.func.__name__] = self.func(obj)
  File "/home/airflow/.local/lib/python3.7/site-packages/airflow/providers/common/sql/operators/sql.py", line 141, in _hook
    conn = BaseHook.get_connection(self.conn_id)
  File "/home/airflow/.local/lib/python3.7/site-packages/airflow/hooks/base.py", line 72, in get_connection
    conn = Connection.get_connection_from_secrets(conn_id)
  File "/home/airflow/.local/lib/python3.7/site-packages/airflow/models/connection.py", line 435, in get_connection_from_secrets
    raise AirflowNotFoundException(f"The conn_id `{conn_id}` isn't defined")
airflow.exceptions.AirflowNotFoundException: The conn_id `postgres_sale_db` isn't defined
[2023-06-13T14:26:55.069+0000] {taskinstance.py:1323} INFO - Marking task as UP_FOR_RETRY. dag_id=ETL_psql_redshift_dag, task_id=Create_psql_schema, execution_date=20230613T142653, start_date=20230613T142654, end_date=20230613T142655
[2023-06-13T14:26:55.075+0000] {standard_task_runner.py:105} ERROR - Failed to execute job 2 for task Create_psql_schema (The conn_id `postgres_sale_db` isn't defined; 183)
[2023-06-13T14:26:55.110+0000] {local_task_job.py:208} INFO - Task exited with return code 1
[2023-06-13T14:26:55.128+0000] {taskinstance.py:2578} INFO - 0 downstream tasks scheduled from follow-on schedule check
