[2023-06-13T11:42:01.220+0700] {taskinstance.py:1083} INFO - Dependencies all met for <TaskInstance: ETL_psql_redshift_dag.Create_psql_schema manual__2023-06-13T04:41:58.394184+00:00 [queued]>
[2023-06-13T11:42:01.225+0700] {taskinstance.py:1083} INFO - Dependencies all met for <TaskInstance: ETL_psql_redshift_dag.Create_psql_schema manual__2023-06-13T04:41:58.394184+00:00 [queued]>
[2023-06-13T11:42:01.225+0700] {taskinstance.py:1279} INFO - 
--------------------------------------------------------------------------------
[2023-06-13T11:42:01.225+0700] {taskinstance.py:1280} INFO - Starting attempt 1 of 3
[2023-06-13T11:42:01.225+0700] {taskinstance.py:1281} INFO - 
--------------------------------------------------------------------------------
[2023-06-13T11:42:01.232+0700] {taskinstance.py:1300} INFO - Executing <Task(PostgresOperator): Create_psql_schema> on 2023-06-13 04:41:58.394184+00:00
[2023-06-13T11:42:01.234+0700] {standard_task_runner.py:55} INFO - Started process 22536 to run task
[2023-06-13T11:42:01.236+0700] {standard_task_runner.py:82} INFO - Running: ['airflow', 'tasks', 'run', 'ETL_psql_redshift_dag', 'Create_psql_schema', 'manual__2023-06-13T04:41:58.394184+00:00', '--job-id', '78', '--raw', '--subdir', 'DAGS_FOLDER/dags_setup.py', '--cfg-path', '/var/folders/13/nw165ws91y30x7r8_6b34m_m0000gn/T/tmp2sgobzlr']
[2023-06-13T11:42:01.237+0700] {standard_task_runner.py:83} INFO - Job 78: Subtask Create_psql_schema
[2023-06-13T11:42:01.288+0700] {task_command.py:388} INFO - Running <TaskInstance: ETL_psql_redshift_dag.Create_psql_schema manual__2023-06-13T04:41:58.394184+00:00 [running]> on host vus-macbook-pro.local
[2023-06-13T11:42:01.341+0700] {taskinstance.py:1507} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_OWNER=vupham
AIRFLOW_CTX_DAG_ID=ETL_psql_redshift_dag
AIRFLOW_CTX_TASK_ID=Create_psql_schema
AIRFLOW_CTX_EXECUTION_DATE=2023-06-13T04:41:58.394184+00:00
AIRFLOW_CTX_TRY_NUMBER=1
AIRFLOW_CTX_DAG_RUN_ID=manual__2023-06-13T04:41:58.394184+00:00
[2023-06-13T11:42:01.342+0700] {sql.py:262} INFO - Executing: -- Create Schema `Sale_schema` for postgreSQL database

DROP SCHEMA IF EXISTS Sale_schema CASCADE;

CREATE SCHEMA Sale_schema;

CREATE TABLE IF NOT EXISTS Sale_schema.Sales (
    Order_ID VARCHAR(255) PRIMARY KEY,
    Order_date Date,
    Product_ID BIGINT,
    Style VARCHAR(45),
    Size VARCHAR(45),
    Quantity INT,
    Payment_method VARCHAR(255),
    Total_cost DECIMAL,
    Profit DECIMAL,
    Customer_ID VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS Sale_schema.Products (
    Product_ID BIGINT PRIMARY KEY,
    Product_name VARCHAR(255),
    SKU INT,
    Brand VARCHAR(255),
    Category VARCHAR(255),
    Product_size DECIMAL,
    Sell_price DECIMAL,
    Commision_rate DECIMAL,
    Commision DECIMAL
);

CREATE TABLE IF NOT EXISTS Sale_schema.Customers (
    Customer_ID VARCHAR(255) PRIMARY KEY,
    Name VARCHAR(255),
    Phone VARCHAR(255),
    Age INT,
    Address VARCHAR(255),
    Postal_code INT
);

CREATE TABLE IF NOT EXISTS Sale_schema.Shipments (
    Shipment_ID VARCHAR(255) PRIMARY KEY,
    Order_ID VARCHAR(255),
    Shipping_date Date,
    Shipping_mode VARCHAR(255),
    Shipping_address VARCHAR(255),
    Shipping_status VARCHAR(255),
    Shipping_company VARCHAR(255),
    Shipping_cost DECIMAL,
    Shipping_zipcode INT
);

CREATE TABLE Sale_schema.Locations (
    Postal_code INT PRIMARY KEY,
    City VARCHAR(45),
    State VARCHAR(45),
    Country VARCHAR(45)
);

ALTER TABLE Sale_schema.Sales
ADD CONSTRAINT fk_sale_product_prodID FOREIGN KEY (Product_ID)
REFERENCES Sale_schema.Products (Product_ID)
ON DELETE CASCADE ON UPDATE CASCADE;


ALTER TABLE Sale_schema.Sales
ADD CONSTRAINT fk_sale_customer_custID FOREIGN KEY (Customer_ID)
REFERENCES Sale_schema.Customers (Customer_ID)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE Sale_schema.Shipments
ADD CONSTRAINT fk_shipment_sale_orderID FOREIGN KEY (Order_ID)
REFERENCES Sale_schema.Sales (Order_ID)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE Sale_schema.Shipments
ADD CONSTRAINT fk_shipment_location_zipcode FOREIGN KEY (Shipping_zipcode)
REFERENCES Sale_schema.Locations (Postal_code)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE Sale_schema.Customers
ADD CONSTRAINT fk_customer_location_postcode FOREIGN KEY (Postal_code)
REFERENCES Sale_schema.Locations (Postal_code)
ON DELETE CASCADE ON UPDATE CASCADE;
[2023-06-13T11:42:01.351+0700] {base.py:73} INFO - Using connection ID 'postgres_sale_db' for task execution.
[2023-06-13T11:42:01.439+0700] {base.py:73} INFO - Using connection ID 'postgres_sale_db' for task execution.
[2023-06-13T11:42:01.445+0700] {sql.py:375} INFO - Running statement: -- Create Schema `Sale_schema` for postgreSQL database

DROP SCHEMA IF EXISTS Sale_schema CASCADE;

CREATE SCHEMA Sale_schema;

CREATE TABLE IF NOT EXISTS Sale_schema.Sales (
    Order_ID VARCHAR(255) PRIMARY KEY,
    Order_date Date,
    Product_ID BIGINT,
    Style VARCHAR(45),
    Size VARCHAR(45),
    Quantity INT,
    Payment_method VARCHAR(255),
    Total_cost DECIMAL,
    Profit DECIMAL,
    Customer_ID VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS Sale_schema.Products (
    Product_ID BIGINT PRIMARY KEY,
    Product_name VARCHAR(255),
    SKU INT,
    Brand VARCHAR(255),
    Category VARCHAR(255),
    Product_size DECIMAL,
    Sell_price DECIMAL,
    Commision_rate DECIMAL,
    Commision DECIMAL
);

CREATE TABLE IF NOT EXISTS Sale_schema.Customers (
    Customer_ID VARCHAR(255) PRIMARY KEY,
    Name VARCHAR(255),
    Phone VARCHAR(255),
    Age INT,
    Address VARCHAR(255),
    Postal_code INT
);

CREATE TABLE IF NOT EXISTS Sale_schema.Shipments (
    Shipment_ID VARCHAR(255) PRIMARY KEY,
    Order_ID VARCHAR(255),
    Shipping_date Date,
    Shipping_mode VARCHAR(255),
    Shipping_address VARCHAR(255),
    Shipping_status VARCHAR(255),
    Shipping_company VARCHAR(255),
    Shipping_cost DECIMAL,
    Shipping_zipcode INT
);

CREATE TABLE Sale_schema.Locations (
    Postal_code INT PRIMARY KEY,
    City VARCHAR(45),
    State VARCHAR(45),
    Country VARCHAR(45)
);

ALTER TABLE Sale_schema.Sales
ADD CONSTRAINT fk_sale_product_prodID FOREIGN KEY (Product_ID)
REFERENCES Sale_schema.Products (Product_ID)
ON DELETE CASCADE ON UPDATE CASCADE;


ALTER TABLE Sale_schema.Sales
ADD CONSTRAINT fk_sale_customer_custID FOREIGN KEY (Customer_ID)
REFERENCES Sale_schema.Customers (Customer_ID)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE Sale_schema.Shipments
ADD CONSTRAINT fk_shipment_sale_orderID FOREIGN KEY (Order_ID)
REFERENCES Sale_schema.Sales (Order_ID)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE Sale_schema.Shipments
ADD CONSTRAINT fk_shipment_location_zipcode FOREIGN KEY (Shipping_zipcode)
REFERENCES Sale_schema.Locations (Postal_code)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE Sale_schema.Customers
ADD CONSTRAINT fk_customer_location_postcode FOREIGN KEY (Postal_code)
REFERENCES Sale_schema.Locations (Postal_code)
ON DELETE CASCADE ON UPDATE CASCADE;, parameters: None
[2023-06-13T11:42:01.489+0700] {taskinstance.py:1318} INFO - Marking task as SUCCESS. dag_id=ETL_psql_redshift_dag, task_id=Create_psql_schema, execution_date=20230613T044158, start_date=20230613T044201, end_date=20230613T044201
[2023-06-13T11:42:01.522+0700] {local_task_job.py:208} INFO - Task exited with return code 0
[2023-06-13T11:42:01.548+0700] {taskinstance.py:2578} INFO - 5 downstream tasks scheduled from follow-on schedule check
